#include "cubeplex.h"

int color = red;
void setup() {
  initCube();
  animationMax = 1000;
}
void loop() {
  randomCubedV2();
}

/****************************** #16 randomCubedV2 *****************************\
| as cubed but in a random sequence                                            |
|                                                                              |
| Written By: Jules Meredith                                                   |
| (using Asher Glick's cubeplex.h/mappings.h/niceTimer.h)                      |
\******************************************************************************/
void randomCubedV2() {
  continuePattern = true;
  int animationSpeed = 150;
  int w = -1;
  int x = 4;
  int y = 0;
  int z = 3;
  while (continuePattern) {
    w = -1;
    x = 4;
    switch(random(0,8)) {
      case 0:
      for (int i = 4; i > 0; i--) {
        x = x - 1;
        w = w + 1;
        drawBox(color,4,0,0,3,x,x,w);
        flushBuffer(); 
        clearBuffer();
        delay(animationSpeed);
      }
      color = nextColor(color);
      w = -1;
      x = 4;
      for (int i = 4; i > 0; i--) {
        x = x - 1;
        w = w + 1;
        drawBox(color,4,0,0,3,w,w,x);
        flushBuffer(); 
        clearBuffer();
        delay(animationSpeed);
      }
      break;
      case 1:
      for (int i = 4; i > 0; i--) {
        x = x - 1;
        w = w + 1;
        drawBox(color,4,3,0,3,w,x,w);
        flushBuffer(); 
        clearBuffer();
        delay(animationSpeed);
      }
      color = nextColor(color);
      w = -1;
      x = 4;
      for (int i = 4; i > 0; i--) {
        x = x - 1;
        w = w + 1;
        drawBox(color,4,3,0,3,x,w,x);
        flushBuffer(); 
        clearBuffer();
        delay(animationSpeed);
      }
      break;
      case 2:
      for (int i = 4; i > 0; i--) {
        x = x - 1;
        w = w + 1;
        drawBox(color,4,3,3,3,w,w,w);
        flushBuffer(); 
        clearBuffer();
        delay(animationSpeed);
      }
      color = nextColor(color);
      w = -1;
      x = 4;
      for (int i = 4; i > 0; i--) {
        x = x - 1;
        w = w + 1;
        drawBox(color,4,3,3,3,x,x,x);
        flushBuffer(); 
        clearBuffer();
        delay(animationSpeed);
      }
      break;
      case 3:
      for (int i = 4; i > 0; i--) {
        x = x - 1;
        w = w + 1;
        drawBox(color,4,0,3,3,x,w,w);
        flushBuffer(); 
        clearBuffer();
        delay(animationSpeed);
      }
      color = nextColor(color);
      w = -1;
      x = 4;
      for (int i = 4; i > 0; i--) {
        x = x - 1;
        w = w + 1;
        drawBox(color,4,0,3,3,w,x,x);
        flushBuffer(); 
        clearBuffer();
        delay(animationSpeed);
      }
      break;
      case 4:
      for (int i = 4; i > 0; i--) {
        x = x - 1;
        w = w + 1;
        drawBox(color,4,0,0,0,x,x,x);
        flushBuffer(); 
        clearBuffer();
        delay(animationSpeed);
      }
      color = nextColor(color);
      w = -1;
      x = 4;
      for (int i = 4; i > 0; i--) {
        x = x - 1;
        w = w + 1;
        drawBox(color,4,0,0,0,w,w,w);
        flushBuffer(); 
        clearBuffer();
        delay(animationSpeed);
      }
      break;
      case 5:
      for (int i = 4; i > 0; i--) {
        x = x - 1;
        w = w + 1;
        drawBox(color,4,3,0,0,w,x,x);
        flushBuffer(); 
        clearBuffer();
        delay(animationSpeed);
      }
      color = nextColor(color);
      w = -1;
      x = 4;
      for (int i = 4; i > 0; i--) {
        x = x - 1;
        w = w + 1;
        drawBox(color,4,3,0,0,x,w,w);
        flushBuffer(); 
        clearBuffer();
        delay(animationSpeed);
      }
      break;
      case 6:
      for (int i = 4; i > 0; i--) {
        x = x - 1;
        w = w + 1;
        drawBox(color,4,3,3,0,w,w,x);
        flushBuffer(); 
        clearBuffer();
        delay(animationSpeed);
      }
      color = nextColor(color);
      w = -1;
      x = 4;
      for (int i = 4; i > 0; i--) {
        x = x - 1;
        w = w + 1;
        drawBox(color,4,3,3,0,x,x,w);
        flushBuffer(); 
        clearBuffer();
        delay(animationSpeed);
      }
      break;
      case 7:
      for (int i = 4; i > 0; i--) {
        x = x - 1;
        w = w + 1;
        drawBox(color,4,0,3,0,x,w,x);
        flushBuffer(); 
        clearBuffer();
        delay(animationSpeed);
      }
      color = nextColor(color);
      w = -1;
      x = 4;
      for (int i = 4; i > 0; i--) {
        x = x - 1;
        w = w + 1;
        drawBox(color,4,0,3,0,w,x,w);
        flushBuffer(); 
        clearBuffer();
        delay(animationSpeed);
      }
      break;
      }
      clearBuffer();
   }  
}
